#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import time
import random
from monitoring import api_monitor
from telegram.error import BadRequest, NetworkError, TimedOut, Forbidden

async def simulate_api_calls():
    """–°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö API –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram API...")
    print("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤—ã–∑–æ–≤–æ–≤ –∏ –æ—à–∏–±–æ–∫...")
    
    methods = [
        'send_message',
        'get_chat_member', 
        'set_chat_permissions',
        'delete_message',
        'edit_message_text'
    ]
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º 100 API –≤—ã–∑–æ–≤–æ–≤
    for i in range(100):
        method = random.choice(methods)
        chat_id = random.randint(-1000000000000, -1000000000)
        user_id = random.randint(100000, 999999999)
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_time = random.uniform(0.1, 2.0)
        await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏
        
        # 80% —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
        if random.random() < 0.8:
            api_monitor.record_api_call(method, True, response_time, chat_id, user_id)
            if i % 10 == 0:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–∑–æ–≤ {method} (#{i+1})")
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            error_type = random.choice([
                'bad_request',
                'forbidden', 
                'network_error',
                'timeout',
                'rate_limit',
                'server_error'
            ])
            
            if error_type == 'bad_request':
                error = BadRequest("Bad Request: message not found")
                error.code = 400
            elif error_type == 'forbidden':
                error = Forbidden("Forbidden: bot was blocked by the user")
                error.code = 403
            elif error_type == 'network_error':
                error = NetworkError("Network error occurred")
                error.code = 502
            elif error_type == 'timeout':
                error = TimedOut("Timed out")
            elif error_type == 'rate_limit':
                error = BadRequest("Too Many Requests: retry after 30")
                error.code = 429
            else:  # server_error
                error = NetworkError("Internal Server Error")
                error.code = 500
            
            api_monitor.record_api_call(method, False, response_time, chat_id, user_id)
            api_monitor.record_error(error, method, chat_id, user_id)
            print(f"‚ùå –û—à–∏–±–∫–∞ {error_type} –≤ {method} (#{i+1})")
    
    print("\nüìà –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = api_monitor.get_error_stats(1)
    print(f"üìä –í—Å–µ–≥–æ –≤—ã–∑–æ–≤–æ–≤: {stats['total_calls']}")
    print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats['total_errors']}")
    print(f"‚úÖ Success Rate: {stats['success_rate']}%")
    print(f"üìâ Error Rate: {stats['error_rate']}%")
    print(f"üî¥ 4xx –æ—à–∏–±–æ–∫: {stats['http_4xx_count']}")
    print(f"üî¥ 5xx –æ—à–∏–±–æ–∫: {stats['http_5xx_count']}")
    print(f"üåê –°–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫: {stats['network_errors']}")
    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç–æ–≤: {stats['timeout_errors']}")
    print(f"üö´ Rate Limit: {stats['rate_limit_errors']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è
    health = api_monitor.get_health_status()
    print(f"\nüè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {health['status']}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
    print("\nüíæ –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫...")
    api_monitor.export_to_file('demo_metrics.json', 'json')
    api_monitor.export_to_file('demo_metrics.prom', 'prometheus')
    api_monitor.export_to_file('demo_metrics_zabbix.json', 'zabbix')
    print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª—ã:")
    print("   - demo_metrics.json (JSON)")
    print("   - demo_metrics.prom (Prometheus)")
    print("   - demo_metrics_zabbix.json (Zabbix)")
    
    print(f"\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8080")
    print("üìä –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   - http://localhost:8080/ (Dashboard)")
    print("   - http://localhost:8080/metrics (Prometheus)")
    print("   - http://localhost:8080/metrics/json (JSON)")
    print("   - http://localhost:8080/metrics/zabbix (Zabbix)")
    print("   - http://localhost:8080/health (Health Check)")

def print_prometheus_metrics():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Prometheus"""
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ Prometheus:")
    print("=" * 50)
    print(api_monitor.get_prometheus_metrics())

def print_zabbix_metrics():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Zabbix"""
    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ Zabbix:")
    print("=" * 50)
    import json
    print(json.dumps(api_monitor.get_zabbix_metrics(), indent=2))

if __name__ == '__main__':
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –±–æ—Ç–∞")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    asyncio.run(simulate_api_calls())
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
    print_prometheus_metrics()
    print_zabbix_metrics()
    
    print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   python mishakrug_monitored.py")